
<template>
  <div>
    <n-h1 prefix="bar">
      <n-text type="primary">
        客户端下载
      </n-text>
    </n-h1>

    <n-data-table
      :columns="headers"
      :data="client_data"
    />
    <!-- <n-form-item label="选择系统架构">
        <n-select
            :options="items.arch"
            placeholder="Select"
        />
      </n-form-item>
    <n-table :single-line="false" >
      <thead>
        <tr class="text-center">
          <th>名称</th>
          <th>下载</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="item in items" class="text-center">
          <td> {{ item.name }}</td>
          <td>
            <n-a :href="item.url" :title="item.name + ' 下载'" target="_blank">下载</n-a>
          </td>
        </tr>
      </tbody>
    </n-table> -->
  </div>
</template>
<script setup>
import { NA, NH1, NTable, NText, NDataTable } from 'naive-ui'
import { ref, computed } from 'vue'
import axios from 'axios'

const headers = [
  {
    title: '名称',
    key: 'name'
  },
  {
    title: '架构',
    key: 'arch'
  },
  {
    title: '下载',
    key: 'download'
  }
]

// 不要这么写，现在是模块化的，download 数据应该保存在这个文件内

// 你可以把 download.js 保存在这个这个 modules 文件夹下而不是外部请求

// 不要随便使用没有封装的 axios，否则代码容易变成一开始前端那样的屎山

// 没有封装的 axios 没有进过任何处理，他就是一个纯请求工具，和业务逻辑完全不同

// 如果你要单独保存 下载数据，我建议保存到 vuex 里然后使用 computed 从 vuex 里获取数据

// 在 src/plugins/stores/tunnels.js ，可以创建一个 downloads 的 state

// 不能从外部请求资源
// let client_data = computed(() => {
//   let data = [];
//   axios({
//     method: 'get',
//     url: 'https://raw.cdn.mcserverx.com/iVampireSP/lae-ui/main/public/downloads.json'
//   }).then((res) => {
//     for (const num in res.data) {
//       const item = res.data[num];
//       // console.log(num,item);
//       data.push({ 'name': item.name, 'arch': item.arch, 'download': item.url });
//     }
//   })
//   console.log(data)
//   return data;
// })

// Get Download List From Json

// 你在写什么

// 分架构 用一个sel选择系统架构然后返回下载列表 全堆在一块有点乱
// ok


</script>